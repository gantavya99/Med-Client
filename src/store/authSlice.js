import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from 'axios';
import { toast } from "react-hot-toast";
const initialToken = localStorage.getItem('jwt token');

const initialState = {
  token: initialToken,
  isAuthenticated: !!initialToken, // Set to true if initialToken is truthy (token exists), false otherwise
  user: null,
};

// Async action using createAsyncThunk for login
export const login = createAsyncThunk('auth/login', async ({ email, password }) => {
  try {
    const response = await axios.post(
      'https://med-server-production.up.railway.app/api/auth/login',
      { email, password }
    );

    const { token, ...user } = response.data;
    toast.success(`Login Successfull!`,{position:'top-center'})
    // The payload returned here will be automatically used as the fulfilled action payload
    return { token, user };
  } catch (error) {
    if (error.response && error.response.data) {
      const errorMessage = error.response.data;
      // Handle the error here and display it or use it as needed
      // For example:
      toast.error(`Login Failed: ${errorMessage}`, { position: 'top-center' });
      // Throw the error to be handled in the rejected case
      throw error;
    }
    // If there's an unexpected error or no error message from the server
    throw error;
  }
});

export const register = createAsyncThunk('auth/register', async ({ email, password }) => {
  try {
    const response = await axios.post(
      'https://med-server-production.up.railway.app/api/auth/register', // Use the correct endpoint for registration
      { email, password }
    );

    const { token, ...user } = response.data;
    toast.success(`Registration Successful!`, { position: 'top-center' });
    // The payload returned here will be automatically used as the fulfilled action payload
    return { token, user };
  } catch (error) {
    if (error.response && error.response.data) {
      const errorMessage = error.response.data;
      // Handle the error here and display it or use it as needed
      // For example:
      toast.error(`Registration Failed: ${errorMessage}`, { position: 'top-center' });
      // Throw the error to be handled in the rejected case
      throw error;
    }
    // If there's an unexpected error or no error message from the server
    throw error;
  }
});


const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    // Reducer logic remains the same
    loginSuccess(state, action) {
      state.token = action.payload.token;
      state.isAuthenticated = true;
      localStorage.setItem('jwt token', action.payload.token);
         
    },
    logout(state) {
      state.token = null;
      state.isAuthenticated = false;
      localStorage.removeItem('jwt token');
    },
  },
  extraReducers: (builder) => {
    // Handle the fulfilled and rejected actions generated by createAsyncThunk
    builder
      .addCase(login.fulfilled, (state, action) => {
        state.token = action.payload.token;
        state.isAuthenticated = true;
        localStorage.setItem('jwt token', action.payload.token);
        
      })
      .addCase(login.rejected, (state, action) => {
        state.isAuthenticated=false;
      });
  },
});

export const { loginSuccess, logout } = authSlice.actions;

export default authSlice.reducer;
  